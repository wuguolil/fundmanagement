@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
@Constraint(validatedBy = StatusValidator.class)
public @interface ValidateString {
    String message() default "Invalid status";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
    Class<? extends Enum<?>> value();
}

public class StatusValidator implements ConstraintValidator<ValidateString, String> {
    private Set<String> validValues;

    @Override
    public void initialize(ValidateString constraintAnnotation) {
        validValues = EnumSet.allOf(constraintAnnotation.value())
                .stream()
                .map(Enum::name)
                .collect(Collectors.toSet());
    }

    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        return validValues.contains(value);
    }
}


@ValidateString(Status.class)
private String status;

public enum Status {
    ACTIVE,
    INACTIVE,
    DELETED;
}

@ValidateString(Status.class)
String status;
